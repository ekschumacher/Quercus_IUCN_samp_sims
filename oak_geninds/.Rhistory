pop_keep<- which(as.vector(table(GI_nocl@pop)>=min_p))
GI_sub<-repool_new(GI_nocl,pop_keep);	GP_sub<-GP_nocl[pop_keep,]
samp_size<-table(GI_nocl@pop)[pop_keep]
###################
#  PAIRWISE FST	  #
###################
##add code to convert
GI_fst <- genind2hierfstat(GI_sub)
sm_fst_mat <- pairwise.neifst(GI_fst)
rownames(sm_fst_mat)<-pop_names[pop_keep];	colnames(sm_fst_mat)<-pop_names[pop_keep]
sm_fst_mat[sm_fst_mat==0]<-NA
threeoak_df[,1]<- mean(apply(sm_fst_mat,2,mean,na.rm=T))
#threeoak_df[,2] <- apply(sm_fst_mat,2,min,na.rm=T)
#threeoak_df[,3] <- apply()
}
}
threeoak_df
for (min_p in min_pop_size_keep){
par(mfrow=c(2,3))	#for IBD plots
for (sp in 1:length(species_names)){
this_species<-species_names[sp]
setwd("G:/My Drive/Hoban_Lab_Docs/Projects/Quercus_collab/")
#------------------------------------------------------------------------------#
#				SECTION ONE
#------------------------------------------------------------------------------#
##############
#  CLONES	 #
##############
#import the data- note individuals with no data at all are dropped
ade_test<-read.genepop(paste("genetic_data/",file_names[sp],sep=""),ncode=3)
pop_names<-levels(ade_test@pop)
#First put into poppr format
popr_test <- as.genclone(ade_test)
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
###################
#  BASIC STATS	  #
###################
#narrow down to populations with >10 individuals- call these GP_sub, GI_sub for subset
pop_keep<- which(as.vector(table(GI_nocl@pop)>=min_p))
GI_sub<-repool_new(GI_nocl,pop_keep);	GP_sub<-GP_nocl[pop_keep,]
samp_size<-table(GI_nocl@pop)[pop_keep]
###################
#  PAIRWISE FST	  #
###################
##add code to convert
GI_fst <- genind2hierfstat(GI_sub)
sm_fst_mat <- pairwise.neifst(GI_fst)
rownames(sm_fst_mat)<-pop_names[pop_keep];	colnames(sm_fst_mat)<-pop_names[pop_keep]
sm_fst_mat[sm_fst_mat==0]<-NA
threeoak_df[sp,1]<- mean(apply(sm_fst_mat,2,mean,na.rm=T))
#threeoak_df[,2] <- apply(sm_fst_mat,2,min,na.rm=T)
#threeoak_df[,3] <- apply()
}
}
threeoak_df
for (min_p in min_pop_size_keep){
par(mfrow=c(2,3))	#for IBD plots
for (sp in 1:length(species_names)){
this_species<-species_names[sp]
setwd("G:/My Drive/Hoban_Lab_Docs/Projects/Quercus_collab/")
#------------------------------------------------------------------------------#
#				SECTION ONE
#------------------------------------------------------------------------------#
##############
#  CLONES	 #
##############
#import the data- note individuals with no data at all are dropped
ade_test<-read.genepop(paste("genetic_data/",file_names[sp],sep=""),ncode=3)
pop_names<-levels(ade_test@pop)
#First put into poppr format
popr_test <- as.genclone(ade_test)
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
###################
#  BASIC STATS	  #
###################
#narrow down to populations with >10 individuals- call these GP_sub, GI_sub for subset
pop_keep<- which(as.vector(table(GI_nocl@pop)>=min_p))
GI_sub<-repool_new(GI_nocl,pop_keep);	GP_sub<-GP_nocl[pop_keep,]
samp_size<-table(GI_nocl@pop)[pop_keep]
###################
#  PAIRWISE FST	  #
###################
##add code to convert
GI_fst <- genind2hierfstat(GI_sub)
sm_fst_mat <- pairwise.neifst(GI_fst)
rownames(sm_fst_mat)<-pop_names[pop_keep];	colnames(sm_fst_mat)<-pop_names[pop_keep]
sm_fst_mat[sm_fst_mat==0]<-NA
threeoak_df[sp,1]<- mean(apply(sm_fst_mat,2,mean,na.rm=T))
threeoak_df[sp,2] <- min(apply(sm_fst_mat,2,min,na.rm=T))
threeoak_df[sp,3] <- max(apply(sm_fst_mat,2,max,na.rm=T))
}
}
threeoak_df
colnames(threeoak_df) <- c("mean","min","max")
rownames(threeoak_df) <- c("QUGE","QUOG","QUBO")
threeoak_df
setwd("C:\\Users\\eschumacher\\Documents\\Qhavardii_ex_situ-main")
wild_files<-c("","_E","_W")
reg_names<-c("all","E","W")
#FST
reg<-1
Spp_tot_genind<-read.genepop(paste0("QH_total_garden_for_FST",wild_files[reg],".gen"),ncode=3)
##now calculate fst
spp_fst <- genind2hierfstat(Spp_tot_genind)
spp_fst_df <- matrix(nrow = 3, ncol = 1)
spp_fst_df <- matrix(nrow = 1, ncol = 3)
spp_fst_df[,1] <- apply(pairwise.neifst(spp_fst),mean,na.rm = T)
?apply
spp_fst_df[,1] <- sapply(pairwise.neifst(spp_fst),mean,na.rm = T)
sapply(pairwise.neifst(spp_fst),mean,na.rm = T)
mean(sapply(pairwise.neifst(spp_fst),mean,na.rm = T))
mean(sapply(pairwise.neifst(spp_fst),mean,na.rm = T),na.rm = T)
spp_fst_df[,1] <- mean(sapply(pairwise.neifst(spp_fst),mean,na.rm = T),na.rm = T)
spp_fst_df[,2] <- min(sapply(pairwise.neifst(spp_fst),min,na.rm = T),na.rm = T)
spp_fst_df[,3] <- max(sapply(pairwise.neifst(spp_fst),max,na.rm = T),na.rm = T)
sapply(pairwise.neifst(spp_fst),min,na.rm = T)
pairwise.neifst(spp_fst)
min(pairwise.neifst(spp_fst), na.rm = TRUE)
min(pairwise.neifst(spp_fst), na.rm = TRUE) > 0
mean(pairwise.neifst(spp_fst), na.rm = TRUE)
min(pairwise.neifst(spp_fst), na.rm = TRUE)
mean(min(pairwise.neifst(spp_fst), na.rm = TRUE), na.rm = TRUE)
?min
spp_fst_df
pwfst_list[[1]]
pwfst_list[[2]]
pwfst_list[[3]]
pwfst_list[[4]]
mean(pwfst_list[[4]], na.rm = TRUE)
min(pwfst_list[[4]], na.rm = TRUE)
max(pwfst_list[[4]], na.rm = TRUE)
##create data frame
fst_spp <- matrix(nrow = 3, ncol = 7)
##write in genind files
ten_oaks_genind_wild_list <- list.files(pattern = "_wild_pop.gen$")
##conversion list
tenoak_wild_genind_list <- list()
##create data frame
fst_spp <- matrix(nrow = 3, ncol = 7)
##loop to load in genind files
for(o in 1:length(ten_oaks_genind_wild_list)){
##load in genind files
tenoak_wild_genind_list[[o]] <- read.genepop(ten_oaks_genind_wild_list[[o]], ncode = 3)
#First put into poppr format
popr_test <- as.genclone(tenoak_wild_genind_list)
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
fst_spp <- genind2hierfstat(GI_nocl)
fst_df <- mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
}
##write in genind files
ten_oaks_genind_wild_list <- list.files(pattern = "_wild_pop.gen$")
#######################################
############ load in files ############
#######################################
setwd("C:\\Users\\eschumacher\\Documents\\GitHub\\Quercus_IUCN_samp_sims\\oak_geninds")
##write in genind files
ten_oaks_genind_wild_list <- list.files(pattern = "_wild_pop.gen$")
##conversion list
tenoak_wild_genind_list <- list()
##loop to load in genind files
for(o in 1:length(ten_oaks_genind_wild_list)){
##load in genind files
tenoak_wild_genind_list[[o]] <- read.genepop(ten_oaks_genind_wild_list[[o]], ncode = 3)
#First put into poppr format
popr_test <- as.genclone(tenoak_wild_genind_list)
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
fst_spp <- genind2hierfstat(GI_nocl)
fst_df <- mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
}
##loop to load in genind files
for(o in 1:length(ten_oaks_genind_wild_list)){
##load in genind files
tenoak_wild_genind_list[[o]] <- read.genepop(ten_oaks_genind_wild_list[[o]], ncode = 3)
#First put into poppr format
popr_test <- as.genclone(tenoak_wild_genind_list[[o]])
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
fst_spp <- genind2hierfstat(GI_nocl)
fst_df <- mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
}
##loop to load in genind files
for(o in 1:length(ten_oaks_genind_wild_list)){
##load in genind files
tenoak_wild_genind_list[[o]] <- read.genepop(ten_oaks_genind_wild_list[[o]], ncode = 3)
#First put into poppr format
popr_test <- as.genclone(tenoak_wild_genind_list[[o]])
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
fst_spp <- genind2hierfstat(GI_nocl)
fst_df[1,] <- mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
}
fst_spp
##loop to load in genind files
for(o in 1:length(ten_oaks_genind_wild_list)){
##load in genind files
tenoak_wild_genind_list[[o]] <- read.genepop(ten_oaks_genind_wild_list[[o]], ncode = 3)
#First put into poppr format
popr_test <- as.genclone(tenoak_wild_genind_list[[o]])
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
fst_conversion <- genind2hierfstat(GI_nocl)
##calculate fst
fst_spp <- pairwise.neifst(fst_conversion)
##store in df
#fst_df[1,] <- mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
}
fst_spp
sapply(fst_spp, mean, na.rm = T)
mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
##loop to load in genind files
for(o in 1:length(ten_oaks_genind_wild_list)){
##load in genind files
tenoak_wild_genind_list[[o]] <- read.genepop(ten_oaks_genind_wild_list[[o]], ncode = 3)
#First put into poppr format
popr_test <- as.genclone(tenoak_wild_genind_list[[o]])
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
fst_conversion <- genind2hierfstat(GI_nocl)
##calculate fst
fst_spp <- pairwise.neifst(fst_conversion)
##store in df
fst_df[1,] <- mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
}
##loop to load in genind files
for(o in 1:length(ten_oaks_genind_wild_list)){
##load in genind files
tenoak_wild_genind_list[[o]] <- read.genepop(ten_oaks_genind_wild_list[[o]], ncode = 3)
#First put into poppr format
popr_test <- as.genclone(tenoak_wild_genind_list[[o]])
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
fst_conversion <- genind2hierfstat(GI_nocl)
##calculate fst
fst_spp <- pairwise.neifst(fst_conversion)
##store in df
fst_df[1,o] <- mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
}
length(ten_oaks_genind_wild_list)
##loop to load in genind files
for(o in 1:length(ten_oaks_genind_wild_list)){
##load in genind files
tenoak_wild_genind_list[[o]] <- read.genepop(ten_oaks_genind_wild_list[[o]], ncode = 3)
#First put into poppr format
popr_test <- as.genclone(tenoak_wild_genind_list[[o]])
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
fst_conversion <- genind2hierfstat(GI_nocl)
##calculate fst
fst_spp <- pairwise.neifst(fst_conversion)
##store in df
fst_df[,o] <- mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
}
mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
##loop to load in genind files
for(o in 1:length(ten_oaks_genind_wild_list)){
##load in genind files
tenoak_wild_genind_list[[o]] <- read.genepop(ten_oaks_genind_wild_list[[o]], ncode = 3)
#First put into poppr format
popr_test <- as.genclone(tenoak_wild_genind_list[[o]])
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
fst_conversion <- genind2hierfstat(GI_nocl)
##calculate fst
fst_spp <- pairwise.neifst(fst_conversion)
##store in df
fst_df[1,] <- mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
}
##loop to load in genind files
for(o in 1:length(ten_oaks_genind_wild_list)){
##load in genind files
tenoak_wild_genind_list[[o]] <- read.genepop(ten_oaks_genind_wild_list[[o]], ncode = 3)
#First put into poppr format
popr_test <- as.genclone(tenoak_wild_genind_list[[o]])
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
fst_conversion <- genind2hierfstat(GI_nocl)
##calculate fst
fst_spp <- pairwise.neifst(fst_conversion)
##store in df
fst_df[o,] <- mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
}
##create data frame
fst_df <- matrix(nrow = 3, ncol = 7)
##loop to load in genind files
for(o in 1:length(ten_oaks_genind_wild_list)){
##load in genind files
tenoak_wild_genind_list[[o]] <- read.genepop(ten_oaks_genind_wild_list[[o]], ncode = 3)
#First put into poppr format
popr_test <- as.genclone(tenoak_wild_genind_list[[o]])
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
fst_conversion <- genind2hierfstat(GI_nocl)
##calculate fst
fst_spp <- pairwise.neifst(fst_conversion)
##store in df
fst_df[1,o] <- mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
}
fst_df
##loop to load in genind files
for(o in 1:length(ten_oaks_genind_wild_list)){
##load in genind files
tenoak_wild_genind_list[[o]] <- read.genepop(ten_oaks_genind_wild_list[[o]], ncode = 3)
#First put into poppr format
popr_test <- as.genclone(tenoak_wild_genind_list[[o]])
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
fst_conversion <- genind2hierfstat(GI_nocl)
##calculate fst
fst_spp <- pairwise.neifst(fst_conversion)
##store in df
fst_df[1,o] <- mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
fst_df[2,o] <- mean(sapply(fst_spp, min, na.rm = T), na.rm = T)
fst_df[3,o] <- mean(sapply(fst_spp, max, na.rm = T), na.rm = T)
}
fst_df
max(sapply(fst_spp, max, na.rm = T), na.rm = T)
sapply(fst_spp, max, na.rm = T)
sapply(fst_spp, max)
max(sapply(fst_spp, max), na.rm = T)
sapply(fst_spp, min)
##loop to load in genind files
for(o in 1:length(ten_oaks_genind_wild_list)){
##load in genind files
tenoak_wild_genind_list[[o]] <- read.genepop(ten_oaks_genind_wild_list[[o]], ncode = 3)
#First put into poppr format
popr_test <- as.genclone(tenoak_wild_genind_list[[o]])
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
fst_conversion <- genind2hierfstat(GI_nocl)
##calculate fst
fst_spp <- pairwise.neifst(fst_conversion)
##store in df
fst_df[1,o] <- mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
fst_df[2,o] <- min(sapply(fst_spp, min), na.rm = T)
fst_df[3,o] <- max(sapply(fst_spp, max), na.rm = T)
}
fst_df
##loop to load in genind files
for(o in 1:length(ten_oaks_genind_wild_list)){
##load in genind files
tenoak_wild_genind_list[[o]] <- read.genepop(ten_oaks_genind_wild_list[[o]], ncode = 3)
#First put into poppr format
popr_test <- as.genclone(tenoak_wild_genind_list[[o]])
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
fst_conversion <- genind2hierfstat(GI_nocl)
##calculate fst
fst_spp <- pairwise.neifst(fst_conversion)
##store in df
fst_df[1,o] <- mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
fst_df[2,o] <- mean(sapply(fst_spp, min), na.rm = T)
fst_df[3,o] <- mean(sapply(fst_spp, max), na.rm = T)
}
fst_df
sapply(fst_spp, min)
sapply(fst_spp, max)
##loop to load in genind files
for(o in 1:length(ten_oaks_genind_wild_list)){
##load in genind files
tenoak_wild_genind_list[[o]] <- read.genepop(ten_oaks_genind_wild_list[[o]], ncode = 3)
#First put into poppr format
popr_test <- as.genclone(tenoak_wild_genind_list[[o]])
strata(popr_test) <- other(popr_test)$population_hierarchy[-1]
list_a<-mlg.id(popr_test)
#Function to pull out individual indices where clone length greater than 1
clone_index<-which(sapply(list_a,function(x) length(x)>1))
#This removes clones and then saves as new file for Genealex if desired
popr_nocl<-clonecorrect(popr_test,strata=~Pop)
#genind2genalex(genclone2genind(popr_nocl),file="QH_clone_free.csv")
#Create genpop and genind objects that now have no clones- GI_nocl, GP_nocl
GI_nocl<-genclone2genind(popr_nocl); 	GP_nocl<-genind2genpop(GI_nocl)
fst_conversion <- genind2hierfstat(GI_nocl)
##calculate fst
fst_spp <- pairwise.neifst(fst_conversion)
##store in df
fst_df[1,o] <- mean(sapply(fst_spp, mean, na.rm = T), na.rm = T)
fst_df[2,o] <- min(fst_spp, na.rm = T)
fst_df[3,o] <- max(fst_spp, na.rm = T)
}
fst_df
##species list
oak_species_list <- c("QUAC","QUBO","QUGE",
"QUHA","QUHI","QUOG","QUPA")
LENGTH(oak_species_list)
length(oak_species_list)
##name fst data frame for all oaks
rownames(fst_df) <- c("Mean_Fst","Min_Fst", "Max_Fst")
colnames(fst_df) <- oak_species_list
fst_df
##write out data frame of all fst values
fst_df <- signif(fst_df, 3)
fst_df
write.csv(fst_df, "C:\\Users\\eschumacher\\Documents\\GitHub\\Quercus_IUCN_samp_sims\\Results\\fst_df.csv")
tenoak_wild_genind_list[[4]]
table(tenoak_wild_genind_list@pop)
table(tenoak_wild_genind_list[[4]]@pop)
