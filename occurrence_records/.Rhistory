##create point data frame
#####100 meters
points_matrix <- gWithinDistance(oak_pcs_spdf_list[[7]], dist = 1, byid = TRUE)
#####300 meters
#points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .00258620685, byid = TRUE)
#######500 m
# points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .0043103448, byid = TRUE)
#####1 km
#points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .0086206897, byid = TRUE)
####2km
#points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .0172413794, byid = TRUE)
##create tri matrix with NAs for bottom rows
points_matrix[lower.tri(points_matrix, diag=TRUE)] <- NA
##now determine where points within 1 km are
auto_cols <- colSums(points_matrix, na.rm=TRUE) == 0
##now subset the original data by this
occurence_no_auto[[sp]] <- oak_occ[[sp]][auto_cols,]
##create data frames of reduced individual data frames
oak_red_dfs[[sp]] <- data.frame(occurence_no_auto[[sp]])
##write out
write.csv(oak_red_dfs[[sp]], paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
##create a list to store all occurrence records
oak_occ <- list()
##list out all species
oak_names <- c("QUAC", "QUAR", "QUAU", "QUBO",
"QUCA", "QUCE", "QUEN", "QUGE",
"QUGR", "QUHA", "QUHI", "QUOG",
"QUPA", "QUTO")
##project spdf list
oak_pcs_spdf_list <- list()
##list for saving occurrences
occurence_no_auto <- list()
##list of data frames
oak_red_dfs <- list()
##Projection string
projection <- c("+proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs")
for(sp in 1:length(oak_names)){
##load in data frames for presence
oak_occ[[sp]] <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##now convert each to a spatial data frame
coordinates(oak_occ[[sp]]) <- c('Longitude', 'Latitude')
proj4string(oak_occ[[sp]]) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
##project to a project coordinate system
##Project to Albers Equal Area Conic
oak_pcs_spdf_list[[sp]] <- spTransform(oak_occ[[sp]], CRS(projection))
##create point data frame
#####100 meters
points_matrix <- gWithinDistance(oak_pcs_spdf_list[[7]], dist = 1, byid = TRUE)
#####300 meters
#points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .00258620685, byid = TRUE)
#######500 m
# points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .0043103448, byid = TRUE)
#####1 km
#points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .0086206897, byid = TRUE)
####2km
#points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .0172413794, byid = TRUE)
##create tri matrix with NAs for bottom rows
points_matrix[lower.tri(points_matrix, diag=TRUE)] <- NA
##now determine where points within 1 km are
auto_cols <- colSums(points_matrix, na.rm=TRUE) == 0
##now subset the original data by this
occurence_no_auto[[sp]] <- oak_occ[[sp]][auto_cols,]
##create data frames of reduced individual data frames
oak_red_dfs[[sp]] <- data.frame(occurence_no_auto[[sp]])
##write out
write.csv(oak_red_dfs[[sp]], paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
##create a list to store all occurrence records
oak_occ <- list()
##list out all species
oak_names <- c("QUAC", "QUAR", "QUAU", "QUBO",
"QUCA", "QUCE", "QUEN", "QUGE",
"QUGR", "QUHA", "QUHI", "QUOG",
"QUPA", "QUTO")
##project spdf list
oak_pcs_spdf_list <- list()
##list for saving occurrences
occurence_no_auto <- list()
##list of data frames
oak_red_dfs <- list()
##Projection string
projection <- c("+proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs")
for(sp in 1:length(oak_names)){
##load in data frames for presence
oak_occ[[sp]] <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##now convert each to a spatial data frame
coordinates(oak_occ[[sp]]) <- c('Longitude', 'Latitude')
proj4string(oak_occ[[sp]]) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
##project to a project coordinate system
##Project to Albers Equal Area Conic
oak_pcs_spdf_list[[sp]] <- spTransform(oak_occ[[sp]], CRS(projection))
##create point data frame
#####100 meters
points_matrix <- gWithinDistance(oak_pcs_spdf_list[[7]], dist = 1, byid = TRUE)
#####300 meters
#points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .00258620685, byid = TRUE)
#######500 m
# points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .0043103448, byid = TRUE)
#####1 km
#points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .0086206897, byid = TRUE)
####2km
#points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .0172413794, byid = TRUE)
##create tri matrix with NAs for bottom rows
points_matrix[lower.tri(points_matrix, diag=TRUE)] <- NA
##now determine where points within 1 km are
auto_cols <- colSums(points_matrix, na.rm=TRUE) == 0
##now subset the original data by this
occurence_no_auto[[sp]] <- oak_occ[[sp]][auto_cols,]
##create data frames of reduced individual data frames
oak_red_dfs[[sp]] <- data.frame(occurence_no_auto[[sp]])
##write out
write.csv(oak_red_dfs[[sp]], paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
oak_occ[[1]]
for(sp in 1:length(oak_names)){
##load in data frames for presence
oak_occ[[sp]] <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##now convert each to a spatial data frame
coordinates(oak_occ[[sp]]) <- c('Longitude', 'Latitude')
proj4string(oak_occ[[sp]]) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
##project to a project coordinate system
##Project to Albers Equal Area Conic
oak_pcs_spdf_list[[sp]] <- spTransform(oak_occ[[sp]], CRS(paste0(projection)))
##create point data frame
#####100 meters
points_matrix <- gWithinDistance(oak_pcs_spdf_list[[7]], dist = 1, byid = TRUE)
#####300 meters
#points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .00258620685, byid = TRUE)
#######500 m
# points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .0043103448, byid = TRUE)
#####1 km
#points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .0086206897, byid = TRUE)
####2km
#points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .0172413794, byid = TRUE)
##create tri matrix with NAs for bottom rows
points_matrix[lower.tri(points_matrix, diag=TRUE)] <- NA
##now determine where points within 1 km are
auto_cols <- colSums(points_matrix, na.rm=TRUE) == 0
##now subset the original data by this
occurence_no_auto[[sp]] <- oak_occ[[sp]][auto_cols,]
##create data frames of reduced individual data frames
oak_red_dfs[[sp]] <- data.frame(occurence_no_auto[[sp]])
##write out
write.csv(oak_red_dfs[[sp]], paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
spTransform(oak_occ[[1]], CRS(paste0(projection)))
for(sp in 1:length(oak_names)){
##load in data frames for presence
oak_occ[[sp]] <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##now convert each to a spatial data frame
coordinates(oak_occ[[sp]]) <- c('Longitude', 'Latitude')
proj4string(oak_occ[[sp]]) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
##project to a project coordinate system
##Project to Albers Equal Area Conic
oak_pcs_spdf_list[[sp]] <- spTransform(oak_occ[[sp]], CRS(paste0(projection)))
##create point data frame
#####100 meters
points_matrix <- gWithinDistance(oak_pcs_spdf_list[[sp]], dist = 1, byid = TRUE)
#####300 meters
#points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .00258620685, byid = TRUE)
#######500 m
# points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .0043103448, byid = TRUE)
#####1 km
#points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .0086206897, byid = TRUE)
####2km
#points_matrix <- gWithinDistance(oak_pcs_spdf_list, dist = .0172413794, byid = TRUE)
##create tri matrix with NAs for bottom rows
points_matrix[lower.tri(points_matrix, diag=TRUE)] <- NA
##now determine where points within 1 km are
auto_cols <- colSums(points_matrix, na.rm=TRUE) == 0
##now subset the original data by this
occurence_no_auto[[sp]] <- oak_occ[[sp]][auto_cols,]
##create data frames of reduced individual data frames
oak_red_dfs[[sp]] <- data.frame(occurence_no_auto[[sp]])
##write out
write.csv(oak_red_dfs[[sp]], paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
?gWithinDistance
points_matrix
oak_pcs_spdf_list[[7]]
gWithinDistance(oak_pcs_spdf_list[[7]], dist = 1, byid = TRUE)
oak_occ <- read.csv("C:\\Users\\eschumacher\\Documents\\GitHub\\Quercus_IUCN_samp_sims\\occurrence_records\\QUAC\\QUAC_occ.csv")
gDistance(oak_occ[1,])
##now convert each to a spatial data frame
coordinates(oak_occ) <- c('Longitude', 'Latitude')
proj4string(oak_occ) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")
gDistance(oak_occ)
oak_occ[1]
oak_occ[2]
##Project to Albers Equal Area Conic
oak_pcs_spdf <- spTransform(oak_occ, CRS(paste0(projection)))
gDistance(oak_pcs_spdf)
oak_occ <- read.csv("C:\\Users\\eschumacher\\Documents\\GitHub\\Quercus_IUCN_samp_sims\\occurrence_records\\QUAC\\QUAC_occ.csv")
library(geosphere)
?distm
distm(oak_occ[1,], oak_occ[,2], fun=distGeo)
distm(oak_occ[1,], oak_occ[2,], fun=distGeo)
oak_occ[1,]
distm(oak_occ[1,2:3], oak_occ[2,2:3], fun=distGeo)
distm(oak_occ[1,2:3], oak_occ[2,2:3], fun=distGeo)/1000
oak_occ[,1]
gWithinDistance(oak_pcs_spdf_list[[1]], dist = 1, byid = TRUE)
gWithinDistance(oak_pcs_spdf_list[[1]], dist = .00258620685, byid = TRUE)
oak_spac <- matrix(nrow = length(oak_occ[,1], ncol = length(oak_occ[,1])))
oak_spac <- matrix(nrow = length(oak_occ[,1]), ncol = length(oak_occ[,1]))
for(i in 1:length(oak_occ[,1])){
for(i in 1:length(oak_occ[,1])){
oak_spac[i,j] <- distm(oak_occ[i,2:3], oak_occ[j,2:3], fun=distGeo)/1000
for(j in 1:length(oak_occ[,2]){
oak_spac[i,j] <- distm(oak_occ[i,2:3], oak_occ[j,2:3], fun=distGeo)/1000
}
}
for(i in 1:length(oak_occ[,1])){
}
for(long in 1:length(oak_spac[,1])){
for(lat in 1:length(oak_spac[,1])){
oak_spac[i,j] <- distm(oak_occ[i,2:3], oak_occ[j,2:3])
}
}
for(long in 1:length(oak_spac[,1])){
for(lat in 1:length(oak_spac[,1])){
oak_spac[long,lat] <- distm(oak_occ[long,2:3], oak_occ[lat,2:3])
}
}
for(long in 1:length(oak_spac[,1])){
for(lat in 1:length(oak_spac[,1])){
oak_spac[long,lat] <- distm(oak_occ[long,2:3], oak_occ[lat,2:3])/1000
}
}
View(oak_spac)
(distm(oak_occ[1,2:3], oak_occ[1,2:3])/1000) < 1
for(long in 1:length(oak_spac[,1])){
for(lat in 1:length(oak_spac[,1])){
oak_spac[long,lat] <- (distm(oak_occ[long,2:3], oak_occ[lat,2:3])/1000) < 1
}
}
View(oak_spac)
oak_spac[lower.tri(oak_spac, diag=TRUE)] <- NA
View(oak_spac)
##now determine where points within 1 km are
auto_cols <- colSums(oak_spac, na.rm=TRUE) == 0
auto_cols
##now subset the original data by this
occurence_no_auto <- oak_occ[auto_cols,]
View(occurence_no_auto)
auto_cols
colSums(oak_spac, na.rm=TRUE)
for(sp in 1:length(oak_names)){
##load in data frames for presence
oak_occ[[sp]] <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##create point data frame
oak_occ_spdf <- matrix(nrow = length(oak_occ[[sp]][,1]), ncol = length(oak_occ[[sp]][,1]))
for(lon in 1:length(oak_occ[[sp]][,1])){
for(lat in 1:lenght(oak_occ[[sp]][,1])){
oak_occ_spdf[lon,lat] <- (distm(oak_occ[[sp]][lon,], oak_occ[[sp]][lat,])/1000) < 1
}
}
##create tri matrix with NAs for bottom rows
oak_occ_spdf[lower.tri(oak_occ_spdf, diag=TRUE)] <- NA
##now determine where points within 1 km are
auto_cols <- colSums(oak_occ_spdf, na.rm=TRUE) == 0
##now subset the original data by this
occurence_no_auto <- oak_occ[auto_cols,]
##create data frames of reduced individual data frames
oak_red_dfs[[sp]] <- data.frame(occurence_no_auto[[sp]])
##write out
write.csv(oak_red_dfs[[sp]], paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
for(sp in 1:length(oak_names)){
##load in data frames for presence
oak_occ[[sp]] <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##create point data frame
oak_occ_spdf <- matrix(nrow = length(oak_occ[[sp]][,1]), ncol = length(oak_occ[[sp]][,1]))
for(lon in 1:length(oak_occ[[sp]][,1])){
for(lat in 1:length(oak_occ[[sp]][,1])){
oak_occ_spdf[lon,lat] <- (distm(oak_occ[[sp]][lon,], oak_occ[[sp]][lat,])/1000) < 1
}
}
##create tri matrix with NAs for bottom rows
oak_occ_spdf[lower.tri(oak_occ_spdf, diag=TRUE)] <- NA
##now determine where points within 1 km are
auto_cols <- colSums(oak_occ_spdf, na.rm=TRUE) == 0
##now subset the original data by this
occurence_no_auto <- oak_occ[auto_cols,]
##create data frames of reduced individual data frames
oak_red_dfs[[sp]] <- data.frame(occurence_no_auto[[sp]])
##write out
write.csv(oak_red_dfs[[sp]], paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
for(sp in 1:length(oak_names)){
##load in data frames for presence
oak_occ[[sp]] <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##create point data frame
oak_occ_spdf <- matrix(nrow = length(oak_occ[[sp]][,1]), ncol = length(oak_occ[[sp]][,1]))
for(lon in 1:length(oak_occ[[sp]][,1])){
for(lat in 1:length(oak_occ[[sp]][,1])){
oak_occ_spdf[lon,lat] <- (distm(oak_occ[[sp]][lon,], oak_occ[[sp]][lat,])/1000) < 1
}
}
##create tri matrix with NAs for bottom rows
#oak_occ_spdf[lower.tri(oak_occ_spdf, diag=TRUE)] <- NA
##now determine where points within 1 km are
#auto_cols <- colSums(oak_occ_spdf, na.rm=TRUE) == 0
##now subset the original data by this
#occurence_no_auto <- oak_occ[auto_cols,]
##create data frames of reduced individual data frames
#oak_red_dfs[[sp]] <- data.frame(occurence_no_auto[[sp]])
##write out
#write.csv(oak_red_dfs[[sp]], paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
##load in data frames for presence
oak_occ <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##create point data frame
oak_occ_spdf <- matrix(nrow = length(oak_occ[,1]), ncol = length(oak_occ[,1]))
for(lon in 1:length(oak_occ[[sp]][,1])){
for(lat in 1:length(oak_occ[[sp]][,1])){
oak_occ_spdf[lon,lat] <- (distm(oak_occ[[sp]][lon,], oak_occ[[sp]][lat,])/1000) < 1
}
}
oak_occ
oak_occ[,1]
length(oak_occ[,1])
for(sp in 1:length(oak_names)){
##load in data frames for presence
oak_occ <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##create point data frame
oak_occ_spdf <- matrix(nrow = length(oak_occ[,1]), ncol = length(oak_occ[,1]))
for(lon in 1:length(oak_occ[,1])){
for(lat in 1:length(oak_occ[,1])){
oak_occ_spdf[lon,lat] <- (distm(oak_occ[[sp]][lon,], oak_occ[[sp]][lat,])/1000) < 1
}
}
##create tri matrix with NAs for bottom rows
#oak_occ_spdf[lower.tri(oak_occ_spdf, diag=TRUE)] <- NA
##now determine where points within 1 km are
#auto_cols <- colSums(oak_occ_spdf, na.rm=TRUE) == 0
##now subset the original data by this
#occurence_no_auto <- oak_occ[auto_cols,]
##create data frames of reduced individual data frames
#oak_red_dfs[[sp]] <- data.frame(occurence_no_auto[[sp]])
##write out
#write.csv(oak_red_dfs[[sp]], paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
oak_occ_spdf
for(sp in 1:length(oak_names)){
##load in data frames for presence
oak_occ <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##create point data frame
oak_occ_spdf <- matrix(nrow = length(oak_occ[,1]), ncol = length(oak_occ[,1]))
for(lon in 1:length(oak_occ[,1])){
for(lat in 1:length(oak_occ[,1])){
oak_occ_spdf[lon,lat] <- (distm(oak_occ[[sp]][lon,], oak_occ[[sp]][lat,])/1000) < 1
}
}
##create tri matrix with NAs for bottom rows
oak_occ_spdf[lower.tri(oak_occ_spdf, diag=TRUE)] <- NA
##now determine where points within 1 km are
auto_cols <- colSums(oak_occ_spdf, na.rm=TRUE) == 0
##now subset the original data by this
occurence_no_auto <- oak_occ[auto_cols,]
##create data frames of reduced individual data frames
oak_red_dfs[[sp]] <- data.frame(occurence_no_auto[[sp]])
##write out
write.csv(oak_red_dfs[[sp]], paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
for(sp in 1:length(oak_names)){
##load in data frames for presence
oak_occ <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##create point data frame
oak_occ_spdf <- matrix(nrow = length(oak_occ[,1]), ncol = length(oak_occ[,1]))
for(lon in 1:length(oak_occ[,1])){
for(lat in 1:length(oak_occ[,1])){
oak_occ_spdf[lon,lat] <- (distm(oak_occ[lon,], oak_occ[lat,])/1000) < 1
}
}
##create tri matrix with NAs for bottom rows
oak_occ_spdf[lower.tri(oak_occ_spdf, diag=TRUE)] <- NA
##now determine where points within 1 km are
auto_cols <- colSums(oak_occ_spdf, na.rm=TRUE) == 0
##now subset the original data by this
occurence_no_auto <- oak_occ[auto_cols,]
##create data frames of reduced individual data frames
oak_red_dfs[[sp]] <- data.frame(occurence_no_auto[[sp]])
##write out
write.csv(oak_red_dfs[[sp]], paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
oak_occ_spdf
for(sp in 1:length(oak_names)){
##load in data frames for presence
oak_occ <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##create point data frame
oak_occ_spdf <- matrix(nrow = length(oak_occ[,1]), ncol = length(oak_occ[,1]))
for(lon in 1:length(oak_occ[,1])){
for(lat in 1:length(oak_occ[,1])){
oak_occ_spdf[lon,lat] <- (distm(oak_occ[lon,2:3], oak_occ[lat,2:3])/1000) < 1
}
}
##create tri matrix with NAs for bottom rows
oak_occ_spdf[lower.tri(oak_occ_spdf, diag=TRUE)] <- NA
##now determine where points within 1 km are
auto_cols <- colSums(oak_occ_spdf, na.rm=TRUE) == 0
##now subset the original data by this
occurence_no_auto <- oak_occ[auto_cols,]
##create data frames of reduced individual data frames
oak_red_dfs[[sp]] <- data.frame(occurence_no_auto[[sp]])
##write out
write.csv(oak_red_dfs[[sp]], paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
for(sp in 1:length(oak_names)){
##load in data frames for presence
oak_occ <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##create point data frame
oak_occ_spdf <- matrix(nrow = length(oak_occ[,1]), ncol = length(oak_occ[,1]))
for(lon in 1:length(oak_occ[,1])){
for(lat in 1:length(oak_occ[,1])){
oak_occ_spdf[lon,lat] <- (distm(oak_occ[lon,2:3], oak_occ[lat,2:3])/1000) < 1
}
}
##create tri matrix with NAs for bottom rows
oak_occ_spdf[lower.tri(oak_occ_spdf, diag=TRUE)] <- NA
##now determine where points within 1 km are
auto_cols <- colSums(oak_occ_spdf, na.rm=TRUE) == 0
##now subset the original data by this
occurence_no_auto <- oak_occ[auto_cols,]
##create data frames of reduced individual data frames
oak_red_dfs <- data.frame(occurence_no_auto)
##write out
write.csv(oak_red_dfs, paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
##create a list to store all occurrence records
oak_occ <- list()
##list out all species
oak_names <- c("QUAC", "QUAR", "QUAU", "QUBO",
"QUCA", "QUCE", "QUEN", "QUGE",
"QUGR", "QUHA", "QUHI", "QUOG",
"QUPA", "QUTO")
##project spdf list
oak_pcs_spdf_list <- list()
##list for saving occurrences
occurence_no_auto <- list()
##list of data frames
oak_red_dfs <- list()
##Projection string
projection <- c("+proj=aea +lat_1=20 +lat_2=60 +lat_0=40 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs")
for(sp in 1:length(oak_names)){
##load in data frames for presence
oak_occ <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##create point data frame
oak_occ_spdf <- matrix(nrow = length(oak_occ[,1]), ncol = length(oak_occ[,1]))
for(lon in 1:length(oak_occ[,1])){
for(lat in 1:length(oak_occ[,1])){
oak_occ_spdf[lon,lat] <- (distm(oak_occ[lon,2:3], oak_occ[lat,2:3])/1000) < 10
}
}
##create tri matrix with NAs for bottom rows
oak_occ_spdf[lower.tri(oak_occ_spdf, diag=TRUE)] <- NA
##now determine where points within 1 km are
auto_cols <- colSums(oak_occ_spdf, na.rm=TRUE) == 0
##now subset the original data by this
occurence_no_auto <- oak_occ[auto_cols,]
##create data frames of reduced individual data frames
oak_red_dfs <- data.frame(occurence_no_auto)
##write out
write.csv(oak_red_dfs, paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
for(sp in 1:length(oak_names)){
##load in data frames for presence
oak_occ <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##create point data frame
oak_occ_spdf <- matrix(nrow = length(oak_occ[,1]), ncol = length(oak_occ[,1]))
for(lon in 1:length(oak_occ[,1])){
for(lat in 1:length(oak_occ[,1])){
oak_occ_spdf[lon,lat] <- (distm(oak_occ[lon,2:3], oak_occ[lat,2:3])/1000) < 20
}
}
##create tri matrix with NAs for bottom rows
oak_occ_spdf[lower.tri(oak_occ_spdf, diag=TRUE)] <- NA
##now determine where points within 1 km are
auto_cols <- colSums(oak_occ_spdf, na.rm=TRUE) == 0
##now subset the original data by this
occurence_no_auto <- oak_occ[auto_cols,]
##create data frames of reduced individual data frames
oak_red_dfs <- data.frame(occurence_no_auto)
##write out
write.csv(oak_red_dfs, paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
for(sp in 1:length(oak_names)){
##load in data frames for presence
oak_occ <- read.csv(paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ.csv"))
##create point data frame
oak_occ_spdf <- matrix(nrow = length(oak_occ[,1]), ncol = length(oak_occ[,1]))
for(lon in 1:length(oak_occ[,1])){
for(lat in 1:length(oak_occ[,1])){
oak_occ_spdf[lon,lat] <- (distm(oak_occ[lon,2:3], oak_occ[lat,2:3])/1000) < 50
}
}
##create tri matrix with NAs for bottom rows
oak_occ_spdf[lower.tri(oak_occ_spdf, diag=TRUE)] <- NA
##now determine where points within 1 km are
auto_cols <- colSums(oak_occ_spdf, na.rm=TRUE) == 0
##now subset the original data by this
occurence_no_auto <- oak_occ[auto_cols,]
##create data frames of reduced individual data frames
oak_red_dfs <- data.frame(occurence_no_auto)
##write out
write.csv(oak_red_dfs, paste0(oak_names[[sp]], "/", oak_names[[sp]], "_occ_red.csv"))
}
library(diveRsity)
library(adegenet)
library(poppr)
library(Demerelate)
